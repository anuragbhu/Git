GIT
  Git is a version control system.
  Git helps you keep track of code changes and who made it.
  Git is used to collaborate on code.
  Git is open source.

SVN
  Apache Subversion is a software versioning and revision control system distributed as open source under the Apache License. Software developers use Subversion to   maintain current and historical versions of files such as source code, web pages, and documentation.
  TortoiseSVN is an Apache Subversion (SVN) client, implemented as a Windows shell extension.

A README.md file that describes the repository (md: markdown documentation)

What does Git do?
  Manage projects with Repositories
  Clone a project to work on a local copy
  Control and track changes with Staging and Committing
  Branch and Merge to allow for work on different parts and versions of a project
  Pull the latest version of the project to a local copy
  Push local updates to the main project

Working with Git
  Initialize Git on a folder, making it a Repository
  Git now creates a hidden folder to keep track of changes in that folder
  When a file is changed, added or deleted, it is considered modified
  You select the modified files you want to Stage
  The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
  Git allows you to see the full history of every commit.
  You can revert back to any previous commit.
  Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!
  
 What is GitHub?
  GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.

Check which version of Git:
$ git --version

Configure Git:
  If you want to set the username/e-mail for just the current repo, you can remove global
  Now let Git know who you are. This is important for version control systems, as each Git commit uses this information:
$ git config --global user.name "anuragbhu"
$ git config --global user.email "test@anurag.com"

$ mkdir myproject
$ mkdir .mysecrets
$ cd myproject

Go to root directory
$ cd \

Clear
$ cls

Initialize Git:
  Git creates a hidden folder to keep track of changes.
  Once you have navigated to the correct folder, you can initialize Git (Initialized empty Git repository) on that folder:
$ git init

Check the Git status and see if it is a part of our repo:
$ git status

Git Staging Environment:
  Staged files are files that are ready to be committed to the repository you are working on.
$ git add test.html
$ git add --all
$ git add .

Git Commit:
  Git considers each commit change point or "save point". It is a point in the project you can go back to if you find a bug, or want to make a change.
  When we commit, we should always include a message.
$ git commit -m "First release of Hello World!"

Git Commit Log:
  To view the history of commits for a repository, you can use the log command:
$ git log
$ git log --oneline

Git Help:
  See all the available options for the specific command:
$ git command -help
$ git commit -help
  See all possible commands:
$ git help --all

New Git Branch:
$ git branch hello-world-images

The * beside branch name specifies that we are currently on that branch:
$ git branch
  use the -a option to see all local and remote branches:
$ git branch -a

Checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command:
$ git checkout hello-world-images

Emergency Branch (hypothetical):
  Now imagine that we are not yet done with hello-world-images, but we need to fix an error on master.
  I don't want to mess with master directly, and I do not want to mess with hello-world-images, since it is not done yet.
  Using the -b option on checkout will create a new branch, and move to it, if it does not exist
  So we create a new branch to deal with the emergency:
$ git checkout -b emergency-fix

Git Branch Merge:
  We have the emergency fix ready, and so let's merge the master and emergency-fix branches.
  First, we need to change to the master branch:
$ git checkout master
$ git merge emergency-fix

As master and emergency-fix are essentially the same now, we can delete emergency-fix locally (remote still exist), as it is no longer needed:
$ git branch -d emergency-fix

Merge Conflict:
  The merge failed, as there is conflict between the versions for test.html.
  This confirms there is a conflict in test.html, but the other files are ready and staged to be committed. So we need to fix that conflict.
   Open the file in the editor and see the differences between the versions and edit it like you want.
   Now merge and delete the branch.
   
Push Local Repository to GitHub (Git Push: Push Changes to GitHub):
  Since we have already set up a local Git repo, we are going to push that to GitHub:
$ git remote add origin https://github.com/anuragbhu/Test_Check.git

  git remote add origin URL specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo.
  Now we are going to push our master branch to the origin url, and set it as the default remote branch:
$ git push -u origin master

Git Pull: Pulling to Keep up-to-date with Changes
  When working as a team on a project, it is important that everyone stays up to date.
  Any time you start working on a project, you should get the most recent changes to your local copy.
  pull is a combination of 2 different commands:
    fetch
    merge
$ git pull origin

Pulling a Branch from GitHub:
$ git pull

Push a Branch to GitHub:
$ git push origin update-readme

If the changes look good, you can go forward, creating a pull request:
  A pull request is how you propose changes. You can ask someone to review your changes or pull your contribution and merge it into their branch.
  
GitHub flow works like this:
  Create a new Branch
  Make changes and add Commits
  Open a Pull Request
  Review
  Deploy
  Merge
  
Git Contribution: Fork a Repository
  Git does not allow you to add code to someone else's repository without access rights.
  A fork is a copy of a repository. This is useful when you want to contribute to someone else's project or start your own project based on theirs.
  fork is not a command in Git, but something offered in GitHub and other repository hosts.
  
Git Contribution: Clone a Fork from GitHub
  Now we have our own fork, but only on GitHub. We also want a clone on our local Git to keep working on it.
  A clone is a full copy of a repository, including all logging and versions of files.
$ git clone https://github.com/abc-test/abc-test.github.io.git

Clone A Private Repository (Github)
git clone https://your-username@github.com/private-repo-username/repo_name.git
  
  Navigate to the new directory, and configure remotes: Basically, we have a full copy of a repository, whose origin we are not allowed to make changes to.
  To check:
$ git remote -v
origin  https://github.com/w3schools-test/w3schools-test.github.io.git (fetch)
origin  https://github.com/w3schools-test/w3schools-test.github.io.git (push)

  According to Git naming conventions, it is recommended to name your own repository origin, and the one you forked for upstream.
$ git remote rename origin upstream
$ git remote add origin https://github.com/anuragbhu/abc-test.github.io.git

  origin - our own fork, where we have read and write access
  upstream - the original, where we have read-only access
  
  Now, push the changes to your own repository and send a Pull Request to the original repository
  
Git Ignore and .gitignore
  When sharing your code with others, there are often files or parts of your project, you do not want to share.
  Examples: log files, temporary files, hidden files, personal files etc.
  single .gitignore which applies to the entire repository.
  Git will not track files and folders specified in .gitignore. However, the .gitignore file itself IS tracked by Git.
$ type nul > .gitignore
  
  For other files
$ type nul > test.txt

  To open any file from cmd: locate to the directory and type file_name.extension
  
  File content:
  # ignore ALL .log files
  *.log

  # ignore ALL files in ANY directory named temp
  temp/
  
Log all the directories and files in current directory
$ dir

Remove file
$ del file_name.extension
  
Remove directory
$ rmdir /s DirectoryName

Undo a commit (not pushed to remote repository)
$ git reset HEAD~
git reset is the command responsible for the undo. It will undo your last commit while leaving your working tree (the state of your files on disk) untouched. You'll need to add them again before you can commit them again.
